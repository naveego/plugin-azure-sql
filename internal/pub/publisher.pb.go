// Code generated by protoc-gen-go. DO NOT EDIT.
// source: publisher.proto

package pub

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PropertyType int32

const (
	// Unicode string, less than 1024 characters.
	PropertyType_STRING PropertyType = 0
	// true/false.
	PropertyType_BOOL PropertyType = 2
	// 64-bit floating point.
	PropertyType_NUMBER PropertyType = 3
	// Date (no time).
	PropertyType_DATE PropertyType = 4
	// Time (no date).
	PropertyType_TIME PropertyType = 5
	// Datetime (date and time).
	PropertyType_DATETIME PropertyType = 6
	// Unicode string, more than 1024 characters.
	PropertyType_TEXT PropertyType = 7
	// Binary data as a base-64 encoded string.
	PropertyType_BLOB PropertyType = 8
	// A JSON object as a string.
	PropertyType_JSON PropertyType = 9
)

var PropertyType_name = map[int32]string{
	0: "STRING",
	2: "BOOL",
	3: "NUMBER",
	4: "DATE",
	5: "TIME",
	6: "DATETIME",
	7: "TEXT",
	8: "BLOB",
	9: "JSON",
}
var PropertyType_value = map[string]int32{
	"STRING":   0,
	"BOOL":     2,
	"NUMBER":   3,
	"DATE":     4,
	"TIME":     5,
	"DATETIME": 6,
	"TEXT":     7,
	"BLOB":     8,
	"JSON":     9,
}

func (x PropertyType) String() string {
	return proto.EnumName(PropertyType_name, int32(x))
}
func (PropertyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{0}
}

type PublishFilter_Kind int32

const (
	// The filter value must equal the value of the property on the record.
	PublishFilter_EQUALS PublishFilter_Kind = 0
	// The filter value must be less than the value of the property on the record.
	PublishFilter_LESS_THAN PublishFilter_Kind = 1
	// The filter value must be greater than the value of the property on the record.
	PublishFilter_GREATER_THAN PublishFilter_Kind = 2
)

var PublishFilter_Kind_name = map[int32]string{
	0: "EQUALS",
	1: "LESS_THAN",
	2: "GREATER_THAN",
}
var PublishFilter_Kind_value = map[string]int32{
	"EQUALS":       0,
	"LESS_THAN":    1,
	"GREATER_THAN": 2,
}

func (x PublishFilter_Kind) String() string {
	return proto.EnumName(PublishFilter_Kind_name, int32(x))
}
func (PublishFilter_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{3, 0}
}

type DiscoverShapesRequest_Mode int32

const (
	// ALL means all shapes the publisher can publish should be returned.
	DiscoverShapesRequest_ALL DiscoverShapesRequest_Mode = 0
	// REFRESH means the publisher return (updated) shapes identified by the partial shapes included in to_refresh.
	DiscoverShapesRequest_REFRESH DiscoverShapesRequest_Mode = 1
)

var DiscoverShapesRequest_Mode_name = map[int32]string{
	0: "ALL",
	1: "REFRESH",
}
var DiscoverShapesRequest_Mode_value = map[string]int32{
	"ALL":     0,
	"REFRESH": 1,
}

func (x DiscoverShapesRequest_Mode) String() string {
	return proto.EnumName(DiscoverShapesRequest_Mode_name, int32(x))
}
func (DiscoverShapesRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{4, 0}
}

type Count_Kind int32

const (
	Count_UNAVAILABLE Count_Kind = 0
	Count_ESTIMATE    Count_Kind = 1
	Count_EXACT       Count_Kind = 2
)

var Count_Kind_name = map[int32]string{
	0: "UNAVAILABLE",
	1: "ESTIMATE",
	2: "EXACT",
}
var Count_Kind_value = map[string]int32{
	"UNAVAILABLE": 0,
	"ESTIMATE":    1,
	"EXACT":       2,
}

func (x Count_Kind) String() string {
	return proto.EnumName(Count_Kind_name, int32(x))
}
func (Count_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{7, 0}
}

type Record_Action int32

const (
	Record_UPSERT Record_Action = 0
	Record_INSERT Record_Action = 1
	Record_UPDATE Record_Action = 2
	Record_DELETE Record_Action = 3
)

var Record_Action_name = map[int32]string{
	0: "UPSERT",
	1: "INSERT",
	2: "UPDATE",
	3: "DELETE",
}
var Record_Action_value = map[string]int32{
	"UPSERT": 0,
	"INSERT": 1,
	"UPDATE": 2,
	"DELETE": 3,
}

func (x Record_Action) String() string {
	return proto.EnumName(Record_Action_name, int32(x))
}
func (Record_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{11, 0}
}

type ConnectRequest struct {
	// The settings the publisher should use to connect, as a JSON string.
	// The JSON will be based on the JSONSchema defined in the publisher's package.json.
	SettingsJson         string   `protobuf:"bytes,2,opt,name=settings_json,json=settingsJson,proto3" json:"settings_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{0}
}
func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (dst *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(dst, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetSettingsJson() string {
	if m != nil {
		return m.SettingsJson
	}
	return ""
}

// ConnectResponse has no data; if the connect fails, the plugin should return an error.
type ConnectResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectResponse) Reset()         { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()    {}
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{1}
}
func (m *ConnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectResponse.Unmarshal(m, b)
}
func (m *ConnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectResponse.Marshal(b, m, deterministic)
}
func (dst *ConnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResponse.Merge(dst, src)
}
func (m *ConnectResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectResponse.Size(m)
}
func (m *ConnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResponse proto.InternalMessageInfo

type PublishRequest struct {
	// The shape of the records to publish.
	Shape *Shape `protobuf:"bytes,1,opt,name=shape,proto3" json:"shape,omitempty"`
	// Limit of number of records to return.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Zero or more filters which should be applied to the returned records.
	Filters              []*PublishFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{2}
}
func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (dst *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(dst, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *PublishRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PublishRequest) GetFilters() []*PublishFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type PublishFilter struct {
	// Kind of the match.
	Kind PublishFilter_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=pub.PublishFilter_Kind" json:"kind,omitempty"`
	// The name of the property on each record which should be matched against the value.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the which should be matched against the named property for each record, as a string.
	// The publisher is responsible for converting the value to the correct type.
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishFilter) Reset()         { *m = PublishFilter{} }
func (m *PublishFilter) String() string { return proto.CompactTextString(m) }
func (*PublishFilter) ProtoMessage()    {}
func (*PublishFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{3}
}
func (m *PublishFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishFilter.Unmarshal(m, b)
}
func (m *PublishFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishFilter.Marshal(b, m, deterministic)
}
func (dst *PublishFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishFilter.Merge(dst, src)
}
func (m *PublishFilter) XXX_Size() int {
	return xxx_messageInfo_PublishFilter.Size(m)
}
func (m *PublishFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishFilter.DiscardUnknown(m)
}

var xxx_messageInfo_PublishFilter proto.InternalMessageInfo

func (m *PublishFilter) GetKind() PublishFilter_Kind {
	if m != nil {
		return m.Kind
	}
	return PublishFilter_EQUALS
}

func (m *PublishFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PublishFilter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DiscoverShapesRequest struct {
	// Mode is the discovery mode.
	Mode DiscoverShapesRequest_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=pub.DiscoverShapesRequest_Mode" json:"mode,omitempty"`
	// The shapes to refresh if mode == 1.
	ToRefresh []*Shape `protobuf:"bytes,2,rep,name=to_refresh,json=toRefresh,proto3" json:"to_refresh,omitempty"`
	// Size of the sample of records to include in the returned shapes.
	SampleSize           uint32   `protobuf:"varint,4,opt,name=sample_size,json=sampleSize,proto3" json:"sample_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverShapesRequest) Reset()         { *m = DiscoverShapesRequest{} }
func (m *DiscoverShapesRequest) String() string { return proto.CompactTextString(m) }
func (*DiscoverShapesRequest) ProtoMessage()    {}
func (*DiscoverShapesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{4}
}
func (m *DiscoverShapesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverShapesRequest.Unmarshal(m, b)
}
func (m *DiscoverShapesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverShapesRequest.Marshal(b, m, deterministic)
}
func (dst *DiscoverShapesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverShapesRequest.Merge(dst, src)
}
func (m *DiscoverShapesRequest) XXX_Size() int {
	return xxx_messageInfo_DiscoverShapesRequest.Size(m)
}
func (m *DiscoverShapesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverShapesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverShapesRequest proto.InternalMessageInfo

func (m *DiscoverShapesRequest) GetMode() DiscoverShapesRequest_Mode {
	if m != nil {
		return m.Mode
	}
	return DiscoverShapesRequest_ALL
}

func (m *DiscoverShapesRequest) GetToRefresh() []*Shape {
	if m != nil {
		return m.ToRefresh
	}
	return nil
}

func (m *DiscoverShapesRequest) GetSampleSize() uint32 {
	if m != nil {
		return m.SampleSize
	}
	return 0
}

type DiscoverShapesResponse struct {
	// Shapes discovered by the publisher.
	Shapes               []*Shape `protobuf:"bytes,1,rep,name=shapes,proto3" json:"shapes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverShapesResponse) Reset()         { *m = DiscoverShapesResponse{} }
func (m *DiscoverShapesResponse) String() string { return proto.CompactTextString(m) }
func (*DiscoverShapesResponse) ProtoMessage()    {}
func (*DiscoverShapesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{5}
}
func (m *DiscoverShapesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoverShapesResponse.Unmarshal(m, b)
}
func (m *DiscoverShapesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoverShapesResponse.Marshal(b, m, deterministic)
}
func (dst *DiscoverShapesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverShapesResponse.Merge(dst, src)
}
func (m *DiscoverShapesResponse) XXX_Size() int {
	return xxx_messageInfo_DiscoverShapesResponse.Size(m)
}
func (m *DiscoverShapesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverShapesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverShapesResponse proto.InternalMessageInfo

func (m *DiscoverShapesResponse) GetShapes() []*Shape {
	if m != nil {
		return m.Shapes
	}
	return nil
}

type Shape struct {
	// ID that the plugin uses to uniquely identify this shape.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of this shape (must be a permanant identifier which is unique in this source).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of this shape, if available.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Properties of this shape.
	Properties []*Property `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
	// Count of records available in this shape.
	Count *Count `protobuf:"bytes,5,opt,name=count,proto3" json:"count,omitempty"`
	// Sample containing zero or more records representative of the data in this shape.
	Sample []*Record `protobuf:"bytes,6,rep,name=sample,proto3" json:"sample,omitempty"`
	// When returned from a publisher, the optional query which can be passed to the publisher to publish records from this shape.
	// When passed to the publisher, the query which should be used to publish records from this shape.
	Query string `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	// Arbitrary JSON blob containing information the publisher uses for things like change detection.
	PublisherMetaJson    string   `protobuf:"bytes,8,opt,name=publisher_meta_json,json=publisherMetaJson,proto3" json:"publisher_meta_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shape) Reset()         { *m = Shape{} }
func (m *Shape) String() string { return proto.CompactTextString(m) }
func (*Shape) ProtoMessage()    {}
func (*Shape) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{6}
}
func (m *Shape) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shape.Unmarshal(m, b)
}
func (m *Shape) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shape.Marshal(b, m, deterministic)
}
func (dst *Shape) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shape.Merge(dst, src)
}
func (m *Shape) XXX_Size() int {
	return xxx_messageInfo_Shape.Size(m)
}
func (m *Shape) XXX_DiscardUnknown() {
	xxx_messageInfo_Shape.DiscardUnknown(m)
}

var xxx_messageInfo_Shape proto.InternalMessageInfo

func (m *Shape) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Shape) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Shape) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Shape) GetProperties() []*Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Shape) GetCount() *Count {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *Shape) GetSample() []*Record {
	if m != nil {
		return m.Sample
	}
	return nil
}

func (m *Shape) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *Shape) GetPublisherMetaJson() string {
	if m != nil {
		return m.PublisherMetaJson
	}
	return ""
}

type Count struct {
	Kind                 Count_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=pub.Count_Kind" json:"kind,omitempty"`
	Value                int32      `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{7}
}
func (m *Count) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Count.Unmarshal(m, b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Count.Marshal(b, m, deterministic)
}
func (dst *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(dst, src)
}
func (m *Count) XXX_Size() int {
	return xxx_messageInfo_Count.Size(m)
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

func (m *Count) GetKind() Count_Kind {
	if m != nil {
		return m.Kind
	}
	return Count_UNAVAILABLE
}

func (m *Count) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Property struct {
	// ID is the permanent, unique identifier for this property.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is an optional display name for the property.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of this property, if available.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Type of the property. Use STRING if no other type matches.
	Type PropertyType `protobuf:"varint,4,opt,name=type,proto3,enum=pub.PropertyType" json:"type,omitempty"`
	// Set to true if this property is part of the primary key for this shape.
	IsKey bool `protobuf:"varint,5,opt,name=is_key,json=isKey,proto3" json:"is_key,omitempty"`
	// Set to true if this property is an orderable value which can be used
	// to determine if one record was created more recently than another record.
	// For example, a CreatedAt datetime column or an auto-incrementing integer primary key.
	IsCreateCounter bool `protobuf:"varint,6,opt,name=is_create_counter,json=isCreateCounter,proto3" json:"is_create_counter,omitempty"`
	// Set to true if this property is an orderable value which can be used
	// to determine if one record was updated more recently than another record.
	// For example, an UpdatedAt datetime column.
	IsUpdateCounter bool `protobuf:"varint,7,opt,name=is_update_counter,json=isUpdateCounter,proto3" json:"is_update_counter,omitempty"`
	// Arbitrary JSON blob containing information the publisher uses for things like change detection.
	PublisherMetaJson string `protobuf:"bytes,8,opt,name=publisher_meta_json,json=publisherMetaJson,proto3" json:"publisher_meta_json,omitempty"`
	// The type of the property as defined in the source system. Used to provide
	// human-readable hints when building mappings.
	TypeAtSource         string   `protobuf:"bytes,9,opt,name=type_at_source,json=typeAtSource,proto3" json:"type_at_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Property) Reset()         { *m = Property{} }
func (m *Property) String() string { return proto.CompactTextString(m) }
func (*Property) ProtoMessage()    {}
func (*Property) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{8}
}
func (m *Property) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Property.Unmarshal(m, b)
}
func (m *Property) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Property.Marshal(b, m, deterministic)
}
func (dst *Property) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Property.Merge(dst, src)
}
func (m *Property) XXX_Size() int {
	return xxx_messageInfo_Property.Size(m)
}
func (m *Property) XXX_DiscardUnknown() {
	xxx_messageInfo_Property.DiscardUnknown(m)
}

var xxx_messageInfo_Property proto.InternalMessageInfo

func (m *Property) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Property) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Property) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Property) GetType() PropertyType {
	if m != nil {
		return m.Type
	}
	return PropertyType_STRING
}

func (m *Property) GetIsKey() bool {
	if m != nil {
		return m.IsKey
	}
	return false
}

func (m *Property) GetIsCreateCounter() bool {
	if m != nil {
		return m.IsCreateCounter
	}
	return false
}

func (m *Property) GetIsUpdateCounter() bool {
	if m != nil {
		return m.IsUpdateCounter
	}
	return false
}

func (m *Property) GetPublisherMetaJson() string {
	if m != nil {
		return m.PublisherMetaJson
	}
	return ""
}

func (m *Property) GetTypeAtSource() string {
	if m != nil {
		return m.TypeAtSource
	}
	return ""
}

type DisconnectRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectRequest) Reset()         { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()    {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{9}
}
func (m *DisconnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisconnectRequest.Unmarshal(m, b)
}
func (m *DisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisconnectRequest.Marshal(b, m, deterministic)
}
func (dst *DisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectRequest.Merge(dst, src)
}
func (m *DisconnectRequest) XXX_Size() int {
	return xxx_messageInfo_DisconnectRequest.Size(m)
}
func (m *DisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectRequest proto.InternalMessageInfo

type DisconnectResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectResponse) Reset()         { *m = DisconnectResponse{} }
func (m *DisconnectResponse) String() string { return proto.CompactTextString(m) }
func (*DisconnectResponse) ProtoMessage()    {}
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{10}
}
func (m *DisconnectResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisconnectResponse.Unmarshal(m, b)
}
func (m *DisconnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisconnectResponse.Marshal(b, m, deterministic)
}
func (dst *DisconnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectResponse.Merge(dst, src)
}
func (m *DisconnectResponse) XXX_Size() int {
	return xxx_messageInfo_DisconnectResponse.Size(m)
}
func (m *DisconnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectResponse proto.InternalMessageInfo

type Record struct {
	// Action for this record. Default value is UPSERT if the plugin
	// cannot determine what the action should be relative to data alreay acquired.
	Action Record_Action `protobuf:"varint,1,opt,name=action,proto3,enum=pub.Record_Action" json:"action,omitempty"`
	// Data for this record, as a JSON string.
	DataJson             string   `protobuf:"bytes,2,opt,name=data_json,json=dataJson,proto3" json:"data_json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_publisher_207dabc539195533, []int{11}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (dst *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(dst, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetAction() Record_Action {
	if m != nil {
		return m.Action
	}
	return Record_UPSERT
}

func (m *Record) GetDataJson() string {
	if m != nil {
		return m.DataJson
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "pub.ConnectRequest")
	proto.RegisterType((*ConnectResponse)(nil), "pub.ConnectResponse")
	proto.RegisterType((*PublishRequest)(nil), "pub.PublishRequest")
	proto.RegisterType((*PublishFilter)(nil), "pub.PublishFilter")
	proto.RegisterType((*DiscoverShapesRequest)(nil), "pub.DiscoverShapesRequest")
	proto.RegisterType((*DiscoverShapesResponse)(nil), "pub.DiscoverShapesResponse")
	proto.RegisterType((*Shape)(nil), "pub.Shape")
	proto.RegisterType((*Count)(nil), "pub.Count")
	proto.RegisterType((*Property)(nil), "pub.Property")
	proto.RegisterType((*DisconnectRequest)(nil), "pub.DisconnectRequest")
	proto.RegisterType((*DisconnectResponse)(nil), "pub.DisconnectResponse")
	proto.RegisterType((*Record)(nil), "pub.Record")
	proto.RegisterEnum("pub.PropertyType", PropertyType_name, PropertyType_value)
	proto.RegisterEnum("pub.PublishFilter_Kind", PublishFilter_Kind_name, PublishFilter_Kind_value)
	proto.RegisterEnum("pub.DiscoverShapesRequest_Mode", DiscoverShapesRequest_Mode_name, DiscoverShapesRequest_Mode_value)
	proto.RegisterEnum("pub.Count_Kind", Count_Kind_name, Count_Kind_value)
	proto.RegisterEnum("pub.Record_Action", Record_Action_name, Record_Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublisherClient interface {
	// Instructs the publisher to connect to its data source.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Requests a listing of shapes this publisher can provide records for.
	DiscoverShapes(ctx context.Context, in *DiscoverShapesRequest, opts ...grpc.CallOption) (*DiscoverShapesResponse, error)
	// PublishString begins streaming records to the client from the plugin.
	PublishStream(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (Publisher_PublishStreamClient, error)
	// Tells the publisher to disconnect from its data source, stop any running publishes,
	// and gracefully prepare to be shut down.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
}

type publisherClient struct {
	cc *grpc.ClientConn
}

func NewPublisherClient(cc *grpc.ClientConn) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/pub.Publisher/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) DiscoverShapes(ctx context.Context, in *DiscoverShapesRequest, opts ...grpc.CallOption) (*DiscoverShapesResponse, error) {
	out := new(DiscoverShapesResponse)
	err := c.cc.Invoke(ctx, "/pub.Publisher/DiscoverShapes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) PublishStream(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (Publisher_PublishStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Publisher_serviceDesc.Streams[0], "/pub.Publisher/PublishStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &publisherPublishStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Publisher_PublishStreamClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type publisherPublishStreamClient struct {
	grpc.ClientStream
}

func (x *publisherPublishStreamClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publisherClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, "/pub.Publisher/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServer is the server API for Publisher service.
type PublisherServer interface {
	// Instructs the publisher to connect to its data source.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Requests a listing of shapes this publisher can provide records for.
	DiscoverShapes(context.Context, *DiscoverShapesRequest) (*DiscoverShapesResponse, error)
	// PublishString begins streaming records to the client from the plugin.
	PublishStream(*PublishRequest, Publisher_PublishStreamServer) error
	// Tells the publisher to disconnect from its data source, stop any running publishes,
	// and gracefully prepare to be shut down.
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
}

func RegisterPublisherServer(s *grpc.Server, srv PublisherServer) {
	s.RegisterService(&_Publisher_serviceDesc, srv)
}

func _Publisher_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.Publisher/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_DiscoverShapes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverShapesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).DiscoverShapes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.Publisher/DiscoverShapes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).DiscoverShapes(ctx, req.(*DiscoverShapesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_PublishStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublishRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublisherServer).PublishStream(m, &publisherPublishStreamServer{stream})
}

type Publisher_PublishStreamServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type publisherPublishStreamServer struct {
	grpc.ServerStream
}

func (x *publisherPublishStreamServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _Publisher_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.Publisher/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Publisher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pub.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Publisher_Connect_Handler,
		},
		{
			MethodName: "DiscoverShapes",
			Handler:    _Publisher_DiscoverShapes_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Publisher_Disconnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishStream",
			Handler:       _Publisher_PublishStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "publisher.proto",
}

func init() { proto.RegisterFile("publisher.proto", fileDescriptor_publisher_207dabc539195533) }

var fileDescriptor_publisher_207dabc539195533 = []byte{
	// 929 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xd1, 0x6e, 0xdb, 0x36,
	0x14, 0xb5, 0x64, 0x59, 0xb6, 0xaf, 0x13, 0x5b, 0x66, 0xd2, 0x56, 0x48, 0x07, 0xd4, 0x50, 0x37,
	0x20, 0xcb, 0x36, 0xa3, 0x70, 0xd0, 0x61, 0x0f, 0x03, 0x06, 0xc5, 0x51, 0x5b, 0x37, 0xb6, 0x93,
	0x51, 0xf2, 0xd0, 0x37, 0x41, 0xb1, 0xd9, 0x85, 0xab, 0x2d, 0xa9, 0x22, 0x1d, 0xc0, 0xfd, 0x82,
	0x0d, 0xfb, 0x84, 0xfd, 0xc7, 0x9e, 0xf6, 0x71, 0x03, 0x49, 0xc9, 0x91, 0x97, 0xec, 0x61, 0xc0,
	0xde, 0xa8, 0x73, 0x0f, 0xef, 0xbd, 0x3a, 0xf7, 0x90, 0x84, 0x4e, 0xba, 0xbe, 0x5e, 0x52, 0x76,
	0x43, 0xb2, 0x7e, 0x9a, 0x25, 0x3c, 0x41, 0xd5, 0x74, 0x7d, 0xed, 0xbc, 0x84, 0xf6, 0x30, 0x89,
	0x63, 0x32, 0xe7, 0x98, 0x7c, 0x5c, 0x13, 0xc6, 0xd1, 0x73, 0xd8, 0x67, 0x84, 0x73, 0x1a, 0xff,
	0xcc, 0xc2, 0x5f, 0x58, 0x12, 0xdb, 0x7a, 0x4f, 0x3b, 0x6e, 0xe2, 0xbd, 0x02, 0x7c, 0xcb, 0x92,
	0xd8, 0xe9, 0x42, 0x67, 0xbb, 0x8d, 0xa5, 0x49, 0xcc, 0x88, 0x73, 0x0b, 0xed, 0x2b, 0x55, 0xa1,
	0xc8, 0xd4, 0x83, 0x1a, 0xbb, 0x89, 0x52, 0x62, 0x6b, 0x3d, 0xed, 0xb8, 0x35, 0x80, 0x7e, 0xba,
	0xbe, 0xee, 0xfb, 0x02, 0xc1, 0x2a, 0x80, 0x0e, 0xa1, 0xb6, 0xa4, 0x2b, 0xca, 0x65, 0x8d, 0x7d,
	0xac, 0x3e, 0xd0, 0xd7, 0x50, 0x7f, 0x4f, 0x97, 0x9c, 0x64, 0xcc, 0xae, 0xf6, 0xaa, 0xc7, 0xad,
	0x01, 0x92, 0x3b, 0xf3, 0xec, 0xaf, 0x64, 0x08, 0x17, 0x14, 0xe7, 0x0f, 0x0d, 0xf6, 0x77, 0x42,
	0xe8, 0x2b, 0x30, 0x3e, 0xd0, 0x78, 0x21, 0xcb, 0xb6, 0x07, 0x4f, 0xee, 0x6f, 0xee, 0x5f, 0xd0,
	0x78, 0x81, 0x25, 0x09, 0x21, 0x30, 0xe2, 0x68, 0x45, 0xf2, 0xbf, 0x94, 0x6b, 0xd1, 0xd6, 0x6d,
	0xb4, 0x5c, 0x13, 0xbb, 0x2a, 0x41, 0xf5, 0xe1, 0x9c, 0x82, 0x21, 0xf6, 0x21, 0x00, 0xd3, 0xfb,
	0x71, 0xe6, 0x8e, 0x7d, 0xab, 0x82, 0xf6, 0xa1, 0x39, 0xf6, 0x7c, 0x3f, 0x0c, 0xde, 0xb8, 0x53,
	0x4b, 0x43, 0x16, 0xec, 0xbd, 0xc6, 0x9e, 0x1b, 0x78, 0x58, 0x21, 0xba, 0xf3, 0xa7, 0x06, 0x8f,
	0xce, 0x29, 0x9b, 0x27, 0xb7, 0x24, 0x93, 0xbf, 0xce, 0x0a, 0x75, 0x4e, 0xc1, 0x58, 0x25, 0x0b,
	0x92, 0x77, 0xf9, 0x4c, 0x76, 0xf9, 0x20, 0xb3, 0x3f, 0x49, 0x16, 0x04, 0x4b, 0x32, 0xfa, 0x12,
	0x80, 0x27, 0x61, 0x46, 0xde, 0x67, 0x84, 0xdd, 0xd8, 0xba, 0x54, 0xa7, 0xac, 0x6b, 0x93, 0x27,
	0x58, 0x05, 0xd1, 0x33, 0x68, 0xb1, 0x68, 0x95, 0x2e, 0x49, 0xc8, 0xe8, 0x27, 0x62, 0x1b, 0x52,
	0x61, 0x50, 0x90, 0x4f, 0x3f, 0x11, 0xe7, 0x33, 0x30, 0x44, 0x66, 0x54, 0x87, 0xaa, 0x3b, 0x1e,
	0x5b, 0x15, 0xd4, 0x82, 0x3a, 0xf6, 0x5e, 0x61, 0xcf, 0x7f, 0x63, 0x69, 0xce, 0xf7, 0xf0, 0xf8,
	0x9f, 0xdd, 0xa8, 0x41, 0x23, 0x07, 0x4c, 0x39, 0x3d, 0x66, 0x6b, 0xf7, 0xea, 0xe7, 0x11, 0xe7,
	0x37, 0x1d, 0x6a, 0x12, 0x41, 0x6d, 0xd0, 0xa9, 0x1a, 0x45, 0x13, 0xeb, 0xf4, 0x61, 0xbd, 0x7b,
	0xd0, 0x5a, 0x10, 0x36, 0xcf, 0x68, 0xca, 0x69, 0x12, 0xe7, 0xaa, 0x97, 0x21, 0xf4, 0x0d, 0x40,
	0x9a, 0x25, 0x29, 0xc9, 0x38, 0x25, 0xcc, 0x36, 0x64, 0xdd, 0x7d, 0x35, 0x58, 0x05, 0x6f, 0x70,
	0x89, 0x20, 0x9c, 0x37, 0x4f, 0xd6, 0x31, 0xb7, 0x6b, 0x25, 0xe7, 0x0d, 0x05, 0x82, 0x55, 0x00,
	0x3d, 0x07, 0x53, 0x49, 0x61, 0x9b, 0x32, 0x59, 0x4b, 0x52, 0x30, 0x99, 0x27, 0xd9, 0x02, 0xe7,
	0x21, 0xe1, 0x83, 0x8f, 0x6b, 0x92, 0x6d, 0xec, 0xba, 0xf2, 0x81, 0xfc, 0x40, 0x7d, 0x38, 0xd8,
	0x1e, 0xa5, 0x70, 0x45, 0x78, 0xa4, 0x8e, 0x49, 0x43, 0x72, 0xba, 0xdb, 0xd0, 0x84, 0xf0, 0x48,
	0x9e, 0x15, 0x0e, 0xb5, 0x61, 0x5e, 0xb3, 0xec, 0xcb, 0xce, 0x5d, 0x53, 0x65, 0x3f, 0x6e, 0xbd,
	0x27, 0x04, 0xaa, 0x15, 0xde, 0x7b, 0x91, 0x7b, 0xaf, 0x03, 0xad, 0xd9, 0xd4, 0xfd, 0xc9, 0x1d,
	0x8d, 0xdd, 0xb3, 0xb1, 0x67, 0x55, 0xd0, 0x1e, 0x34, 0x3c, 0x3f, 0x18, 0x4d, 0xdc, 0xc0, 0xb3,
	0x34, 0xd4, 0x84, 0x9a, 0xf7, 0xce, 0x1d, 0x06, 0x96, 0xee, 0xfc, 0xa5, 0x43, 0xa3, 0xd0, 0xe6,
	0x7f, 0x1a, 0xc2, 0x17, 0x60, 0xf0, 0x4d, 0xaa, 0xac, 0xd4, 0x1e, 0x74, 0x77, 0xe4, 0x0f, 0x36,
	0x29, 0xc1, 0x32, 0x8c, 0x1e, 0x81, 0x49, 0x59, 0xf8, 0x81, 0x6c, 0xa4, 0xfa, 0x0d, 0x5c, 0xa3,
	0xec, 0x82, 0x6c, 0xd0, 0x09, 0x74, 0x29, 0x0b, 0xe7, 0x19, 0x89, 0x38, 0x09, 0xe5, 0x10, 0x48,
	0x66, 0x9b, 0x92, 0xd1, 0xa1, 0x6c, 0x28, 0xf1, 0xa1, 0x82, 0x73, 0xee, 0x3a, 0x5d, 0x94, 0xb9,
	0xf5, 0x82, 0x3b, 0x93, 0x78, 0xc1, 0xfd, 0x8f, 0xe3, 0x40, 0x9f, 0x43, 0x5b, 0xb4, 0x19, 0x46,
	0x3c, 0x64, 0xc9, 0x3a, 0x9b, 0x13, 0xbb, 0xa9, 0x2e, 0x38, 0x81, 0xba, 0xdc, 0x97, 0x98, 0x73,
	0x00, 0x5d, 0x69, 0xff, 0xf2, 0xd5, 0xe8, 0x1c, 0x02, 0x2a, 0x83, 0xf9, 0xc5, 0xf7, 0xbb, 0x06,
	0xa6, 0x32, 0x0e, 0x3a, 0x01, 0x33, 0x9a, 0x4b, 0xf9, 0xd4, 0x8c, 0x51, 0xc9, 0x55, 0x7d, 0x57,
	0x46, 0x70, 0xce, 0x40, 0x4f, 0xa1, 0xb9, 0x88, 0x8a, 0x6e, 0xd5, 0x20, 0x1a, 0x02, 0x90, 0x9e,
	0xf9, 0x0e, 0x4c, 0x45, 0x17, 0xb7, 0xcd, 0xec, 0xca, 0xf7, 0x70, 0x60, 0x55, 0xc4, 0x7a, 0x34,
	0x95, 0x6b, 0x4d, 0xe1, 0xe7, 0x62, 0xec, 0xba, 0x58, 0x9f, 0x7b, 0x63, 0x2f, 0xf0, 0xac, 0xea,
	0x49, 0x0a, 0x7b, 0xe5, 0x99, 0x88, 0x98, 0x1f, 0xe0, 0xd1, 0xf4, 0xb5, 0x55, 0x41, 0x0d, 0x30,
	0xce, 0x2e, 0x2f, 0xc7, 0x6a, 0xc7, 0x74, 0x36, 0x39, 0xf3, 0xb0, 0x55, 0x15, 0xa8, 0xcc, 0x63,
	0x88, 0x55, 0x30, 0x9a, 0x78, 0x56, 0x4d, 0xd8, 0x4a, 0x60, 0xf2, 0xcb, 0x94, 0xb8, 0xf7, 0x2e,
	0xb0, 0xea, 0x32, 0xc3, 0xf8, 0xf2, 0xcc, 0x6a, 0x88, 0xd5, 0x5b, 0xff, 0x72, 0x6a, 0x35, 0x07,
	0xbf, 0xea, 0xd0, 0xbc, 0x2a, 0x64, 0x46, 0xdf, 0x42, 0x3d, 0x7f, 0x19, 0xd0, 0x41, 0xee, 0xf0,
	0xb2, 0x86, 0x47, 0x87, 0xbb, 0x60, 0xae, 0x61, 0x05, 0x5d, 0x40, 0x7b, 0xf7, 0xbe, 0x41, 0x47,
	0xff, 0x7e, 0x25, 0x1e, 0x3d, 0x7d, 0x30, 0xb6, 0x4d, 0xf6, 0x72, 0xfb, 0x24, 0xf8, 0x3c, 0x23,
	0xd1, 0x2a, 0x6f, 0x65, 0xf7, 0x7d, 0x3a, 0x2a, 0x9f, 0x79, 0xa7, 0xf2, 0x42, 0x43, 0x3f, 0x00,
	0xdc, 0xcd, 0x17, 0x3d, 0xbe, 0xab, 0xb1, 0xf3, 0x07, 0x4f, 0xee, 0xe1, 0x45, 0xdd, 0x6b, 0x53,
	0xbe, 0xac, 0xa7, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x11, 0xa2, 0x16, 0x6c, 0x07, 0x00,
	0x00,
}
